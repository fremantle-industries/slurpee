use Mix.Config

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.
config :slurpee, SlurpeeWeb.Endpoint,
  http: [port: 4000],
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  watchers: [
    node: [
      "node_modules/webpack/bin/webpack.js",
      "--mode",
      "development",
      "--watch",
      "--watch-options-stdin",
      cd: Path.expand("../assets", __DIR__)
    ]
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :slurpee, SlurpeeWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/slurpee_web/(live|views)/.*(ex)$",
      ~r"lib/slurpee_web/templates/.*(eex)$"
    ]
  ]

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

# Blockchain Connections
# TODO: The aim is to not need this at all. It should be dynamically configured
config :ethereumex, client_type: :http

# Slurp
config :slurp,
  blockchains: %{
    "eth-mainnet" => %{
      start_on_boot: true,
      name: "Ethereum Mainnet",
      adapter: Slurp.Adapters.Evm,
      network_id: 1,
      chain_id: 1,
      chain: "ETH",
      testnet: false,
      timeout: 5000,
      new_head_initial_history: 0,
      poll_interval_ms: 2_500,
      rpc: [
        "https://api.mycryptoapi.com/eth"
      ]
    },
    "bsc-mainnet" => %{
      start_on_boot: true,
      name: "Binance Smart Chain Mainnet",
      adapter: Slurp.Adapters.Evm,
      network_id: 56,
      chain_id: 56,
      chain: "BSC",
      testnet: false,
      new_head_initial_history: 0,
      poll_interval_ms: 1_000,
      rpc: [
        "https://bsc-dataseed1.binance.org"
      ]
    },
    "matic-mainnet" => %{
      start_on_boot: false,
      name: "Matic Mainnet",
      adapter: Slurp.Adapters.Evm,
      network_id: 137,
      chain_id: 137,
      chain: "Matic",
      testnet: false,
      timeout: 5000,
      new_head_initial_history: 0,
      poll_interval_ms: 2_500,
      rpc: [
        "https://rpc-mainnet.matic.network"
      ]
    },
    "avalanche-mainnet" => %{
      start_on_boot: false,
      name: "Matic Mainnet",
      adapter: Slurp.Adapters.Evm,
      network_id: 43114,
      chain_id: 43114,
      chain: "Avax",
      testnet: false,
      timeout: 5000,
      new_head_initial_history: 0,
      poll_interval_ms: 2_500,
      rpc: [
        "https://api.avax.network/ext/bc/C/rpc"
      ]
    }
  }

config :slurp,
  new_head_subscriptions: %{
    "*" => [
      %{
        enabled: true,
        handler: {Slurpee.NewHeadHandler, :handle_new_head, []}
      }
    ]
  }

config :slurp,
  log_subscriptions: %{
    "*" => %{
      # ERC20
      "Approval(address,address,uint256)" => [
        %{
          enabled: true,
          struct: Examples.Erc20.Events.Approval,
          handler: {Slurpee.EventHandler, :handle_event, []},
          abi: [
            %{
              "anonymous" => false,
              "inputs" => [
                %{
                  "indexed" => true,
                  "name" => "owner",
                  "type" => "address"
                },
                %{
                  "indexed" => true,
                  "name" => "spender",
                  "type" => "address"
                },
                %{
                  "indexed" => false,
                  "name" => "value",
                  "type" => "uint256"
                }
              ],
              "name" => "Approval",
              "type" => "event"
            }
          ]
        }
      ]
    }
  }
